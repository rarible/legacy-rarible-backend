archetype royalties(
  owner : address
)

variable owner_candidate : option<address> = none
variable validator : option<address> = none

asset whitelist {
  a : address
}

entry transferOwnership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claimOwnership() {
  called by opt_get(owner_candidate)
  effect {
    owner := opt_get(owner_candidate);
    owner_candidate := none
  }
}

record part {
  partAccount : address;
  partValue   : nat;
}

asset royalties identified by rtoken rtokenId to big_map {
  rtoken : address;
  rtokenId : option<nat>;
  rvalue : list<part>;
}

entry setRoyalties(token : address, tokenId : option<nat>, value : list<part>) {
  // called by owner
  effect {
    royalties.addupdate((token, tokenId), {rvalue = value})
  }
}

entry setValidator(ivalidator : option<address>) {
  called by owner
  effect {
    validator := ivalidator
  }
}

getter getRoyalties(token : address, tokenId : nat, data : bytes) : list<part> * bytes {
  dorequire(caller = require_some(validator, "validator must be not none"), "validator is not caller");
  return
  (if royalties.contains((token, some(tokenId)))
  then ((royalties[(token, some(tokenId))].rvalue, data))
  else ((royalties[(token, none)].rvalue, data)))
}
